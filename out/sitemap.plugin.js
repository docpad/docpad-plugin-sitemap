// Generated by CoffeeScript 1.12.4
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  module.exports = function(BasePlugin) {
    var SitemapPlugin, extendr, pathUtil, safefs, sm;
    extendr = require('extendr');
    pathUtil = require('path');
    safefs = require('safefs');
    sm = require('sitemap');
    return SitemapPlugin = (function(superClass) {
      extend(SitemapPlugin, superClass);

      function SitemapPlugin() {
        return SitemapPlugin.__super__.constructor.apply(this, arguments);
      }

      SitemapPlugin.prototype.name = 'sitemap';

      SitemapPlugin.prototype.config = {
        cachetime: 10 * 60 * 1000,
        changefreq: 'weekly',
        priority: 0.5,
        filePath: 'sitemap.xml',
        collectionName: 'html',
        optimize: true,
        sortByURL: false
      };

      SitemapPlugin.prototype.sortByURL = function(a, b) {
        if (a.url < b.url) {
          return -1;
        }
        if (a.url > b.url) {
          return 1;
        }
        return 0;
      };

      SitemapPlugin.prototype.writeAfter = function(opts, next) {
        var docpad, docpadConfig, err, sitemap, sitemapData, sitemapPath, templateData;
        docpad = this.docpad;
        templateData = docpad.getTemplateData();
        docpadConfig = docpad.getConfig();
        sitemapData = extendr.extend({
          hostname: templateData.site.url,
          cachetime: null,
          urls: []
        }, this.getConfig());
        if (!sitemapData.hostname) {
          err = new Error('You must specify templateData.site.url in your docpad configuration file');
          return next(err);
        }
        sitemapPath = pathUtil.resolve(docpadConfig.outPath, sitemapData.filePath);
        docpad.log('debug', 'Creating sitemap in ' + sitemapPath);
        docpad.getCollection(sitemapData.collectionName).sortCollection({
          date: 1
        }).forEach(function(document) {
          var data, ref, ref1;
          if ((document.get('sitemap') !== false) && (document.get('write') !== false) && (document.get('ignored') !== true)) {
            data = {
              url: document.get('url'),
              changefreq: (ref = document.get('changefreq')) != null ? ref : sitemapData.changefreq,
              priority: (ref1 = document.get('priority')) != null ? ref1 : sitemapData.priority,
              lastmod: document.get('mtime').toString()
            };
            if (sitemapData.optimize) {
              data.url = data.url.replace(/\/index\.html$/i, '/');
            }
            docpad.log("debug", data);
            return sitemapData.urls.push(data);
          }
        });
        if (sitemapData.sortByURL) {
          sitemapData.urls.sort(this.sortByURL);
        }
        sitemap = sm.createSitemap(sitemapData);
        safefs.writeFile(sitemapPath, sitemap.toString(), function(err) {
          if (err) {
            return typeof next === "function" ? next(err) : void 0;
          }
          docpad.log('debug', "Wrote the " + sitemapData.filePath + " file to: " + sitemapPath);
          return next();
        });
        return this;
      };

      return SitemapPlugin;

    })(BasePlugin);
  };

}).call(this);
